/**    
 * 文件名：DBAcessResult.java    
 *    
 * 版本信息：    
 * 日期：2018年3月17日    
 * Copyright 足下 Corporation 2018     
 * 版权所有    
 *    
 */
package DBRPC.DBAcess;

import java.sql.CallableStatement;
import java.sql.Connection;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.Statement;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

/**    
 *     
 * 项目名称：DBAcess    
 * 类名称：DBAcessResult    
 * 类描述：  面向用户的封装类  
 * 创建人：jinyu    
 * 创建时间：2018年3月17日 下午1:54:51    
 * 修改人：jinyu    
 * 修改时间：2018年3月17日 下午1:54:51    
 * 修改备注：    
 * @version     
 *     
 */
public class DBAcessResult {
    DBAcess db=new DBAcess();
  private   String error="";
    public String getEror()
    {
        return error;
    }
    /**
     * 
     * @Title: executeDMLSql   
     * @Description: 执行SQL    insert,update,delete
     * @param sql
     * @return 影响行
     * @throws SQLException      
     */
        public int executeDMLSql(String sql) 
        {
            try {
                return db.executeDMLSql(sql);
            } catch (SQLException e) {
                error=e.getMessage();
              
            }
            return 0;
        }
        

      /**
     * 
     * @Title: exeQuerySql   
     * @Description: 执行SQL查询  
     * @param sql
     * @return
     * @throws SQLException      
     * ResultSet      
     * @throws
     */
        public ResultSet executeQuerySql(String sql)
        { 
             try {
             return   db.executeQuerySql(sql);
            } catch (SQLException e) {
               error=e.getMessage();
               
            }
            return null;
        }
        
        /**
         * 
         * @Title: executeBatchSql   
         * @Description: JDBC执行多条SQL语句  
         * @param sqls
         * @throws SQLException      
         * void      
         * @throws
         */
        public void executeBatchSql(String[]sqls) 
        {
                try {
                    db.executeBatchSql(sqls);
                } catch (SQLException e) {
                  error=e.getMessage();
                }
        }
        
        /**
         * 
         * @Title: executeBatchSql   
         * @Description: 批量执行  
         * @param sql
         * @param param
         * @return
         * @throws SQLException      
         * int      
         * @throws
         */
        public int executeBatchSql(String sql,Object[][]param) 
        {
              try {
            return    db.executeBatchSql(sql, param);
            } catch (SQLException e) {
                 error=e.getMessage();
            }
            return 0;
        }
        /**   
         * insert update delete SQL语句的执行的统一方法   
         * @param sql SQL语句   
         * @param params 参数数组，若没有参数则为null   
         * @return 受影响的行数   
         */      
        public int executeUpdate(String sql, Object[] params) {      
            try {
                return db.executeUpdate(sql, params);
            } catch (SQLException e) {
             error=e.getMessage();
            }
            return 0;  
        }      
        /**   
         * SQL 查询将查询结果：一行一列   
         * @param sql SQL语句   
         * @param params 参数数组，若没有参数则为null   
         * @return 结果集   
         */      
        public Object executeQuerySingle(String sql, Object[] params) {      
                db.executeQuerySingle(sql, params);
        }      
          
        /**   
         * 获取结果集，并将结果放在List中   
         *    
         * @param sql  SQL语句   
         *         params  参数，没有则为null    
         * @return List   
         *                       结果集   
         */      
        public List<Object> excuteQuery(String sql, Object[] params) {      
            // 执行SQL获得结果集      
            ResultSet rs = executeQueryRS(sql, params);      
                  
            // 创建ResultSetMetaData对象      
            ResultSetMetaData rsmd = null;      
                  
            // 结果集列数      
            int columnCount = 0;      
            try {      
                rsmd = rs.getMetaData();      
                      
                // 获得结果集列数      
                columnCount = rsmd.getColumnCount();      
            } catch (SQLException e1) {      
                System.out.println(e1.getMessage());      
            }      
          
            // 创建List      
            List<Object> list = new ArrayList<Object>();      
          
            try {      
                // 将ResultSet的结果保存到List中      
                while (rs.next()) {      
                    Map<String, Object> map = new HashMap<String, Object>();      
                    for (int i = 1; i <= columnCount; i++) {      
                        map.put(rsmd.getColumnLabel(i), rs.getObject(i));      
                    }      
                    list.add(map);//每一个map代表一条记录，把所有记录存在list中      
                }      
            } catch (SQLException e) {      
                System.out.println(e.getMessage());      
            } finally {      
                // 关闭所有资源      
              
            }      
          
            return list;      
        }      
              
        /**   
         * 存储过程带有一个输出参数的方法   
         * @param sql 存储过程语句   
         * @param params 参数数组   
         * @param outParamPos 输出参数位置   
         * @param SqlType 输出参数类型   
         * @return 输出参数的值   
         */      
        public Object excuteQuery(String sql, Object[] params,int outParamPos, int SqlType) {      
            Object object = null;      
            Connection conn = null;
            try {
                conn = getConnection();
            } catch (SQLException e1) {
                
                e1.printStackTrace();
            }      
            try {      
                // 调用存储过程      
                // prepareCall:创建一个 CallableStatement 对象来调用数据库存储过程。  
                CallableStatement callableStatement = conn.prepareCall(sql);      
                      
                // 给参数赋值      
                if(params != null) {      
                    for(int i = 0; i < params.length; i++) {      
                        callableStatement.setObject(i + 1, params[i]);      
                    }      
                }      
                      
                // 注册输出参数      
                callableStatement.registerOutParameter(outParamPos, SqlType);      
                      
                // 执行      
                callableStatement.execute();      
                      
                // 得到输出参数      
                object = callableStatement.getObject(outParamPos);      
                      
            } catch (SQLException e) {      
                System.out.println(e.getMessage());      
            } finally {      
                // 释放资源      
            }      
            return object;      
          
                
        }   
}
